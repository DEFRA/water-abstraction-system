'use strict'

/**
 * @module PreviousBillingDataSeeder
 */

const BillLicenceHelper = require('../helpers/bill-licence.helper.js')
const BillRunHelper = require('../helpers/bill-run.helper.js')
const BillHelper = require('../helpers/bill.helper.js')
const BillingAccountHelper = require('../helpers/billing-account.helper.js')
const ChargeCategoryHelper = require('../helpers/charge-category.helper.js')
const LicenceHelper = require('../helpers/licence.helper.js')
const RegionHelper = require('../helpers/region.helper.js')
const TransactionHelper = require('../helpers/transaction.helper.js')

/**
 * Seeds previous billing data need to support testing of supplementary billing
 *
 * This seed was created to support testing of the `FetchPreviousTransactionsService` when we realised we needed to
 * update it to filter by bill run type (standard vs two-part tariff).
 *
 * When creating a standard supplementary bill run, we should only be looking at previous transactions in 'annual'
 * and 'supplementary' bill runs. Else, the service could find transactions from two-part tariff bill runs that will
 * _never_ match with what the engine is generating, resulting in them being mistakenly credited.
 *
 * This seed specifically creates that scenario.
 *
 * We have 1 billing account with 2 licences. Both licences have been included in a standard and two-part tariff annual
 * bill run. One of the licences has also been included in a standard and two-part tariff supplementary bill run.
 *
 * When testing the `FetchPreviousTransactionsService`, if the scenario is we are creating a two-part tariff supplementary
 * bill run, then it should only return the 'two-part-tariff' transactions for each licence when called. The standard
 * transactions must be ignored.
 *
 * @returns {Promise<object>} An containing references to all the seeded data
 */
async function seed() {
  const region = RegionHelper.select(2)
  const billingAccount = await BillingAccountHelper.add()
  const licenceAnnual = await LicenceHelper.add({ regionId: region.id })
  const licenceBoth = await LicenceHelper.add({ regionId: region.id })
  const chargeCategory = ChargeCategoryHelper.select()

  const seedData = {
    billingAccount,
    chargeCategory,
    licenceAnnual,
    licenceBoth,
    region,
    scheme: 'sroc',
    toFinancialYearEnding: 2023
  }

  seedData.standard = await _standardBillingData(seedData)
  seedData.twoPartTariff = await _twoPartTariffBillingData(seedData)

  return seedData
}

/**
 * Deletes all the seeded previous billing data
 *
 * @param {object} seedData - The object containing seed data generated by `seed()`
 */
async function zap(seedData) {
  const { billingAccount, licenceAnnual, licenceBoth, standard, twoPartTariff } = seedData

  await _zapBillRun(standard.supplementaryBillRun)
  await _zapBillRun(standard.annualBillRun)
  await _zapBillRun(twoPartTariff.supplementaryBillRun)
  await _zapBillRun(twoPartTariff.annualBillRun)

  await billingAccount.$query().delete()
  await licenceAnnual.$query().delete()
  await licenceBoth.$query().delete()
}

async function _zapBillRun(billRun) {
  for (const bill of billRun.bills) {
    for (const billLicence of bill.billLicences) {
      for (const transaction of billLicence.transactions) {
        await transaction.$query().delete()
      }

      await billLicence.$query().delete()
    }

    await bill.$query().delete()
  }

  await billRun.$query().delete()
}

async function _annual(seedData, batchType) {
  const { billingAccount, chargeCategory, licenceAnnual, licenceBoth, region, scheme, toFinancialYearEnding } = seedData

  const billRun = await BillRunHelper.add({
    batchType,
    regionId: region.id,
    scheme,
    status: 'sent',
    toFinancialYearEnding
  })

  const bill = await BillHelper.add({
    accountNumber: billingAccount.accountNumber,
    billingAccountId: billingAccount.id,
    billRunId: billRun.id
  })

  bill.billLicences = []

  let description = 'Water abstraction charge: Agriculture spray irrigation at East Rudham'

  if (batchType === 'two_part_tariff') {
    description = 'Two-part tariff basic water abstraction charge: Agriculture spray irrigation at East Rudham'
  }

  for (const licence of [licenceAnnual, licenceBoth]) {
    const billLicence = await BillLicenceHelper.add({
      billId: bill.id,
      licenceId: licence.id,
      licenceRef: licence.licenceRef
    })

    const transaction = await TransactionHelper.add({
      billLicenceId: billLicence.id,
      credit: false,
      description,
      startDate: new Date(`${toFinancialYearEnding - 1}-04-01`),
      endDate: new Date(`${toFinancialYearEnding}-03-31`),
      chargeType: 'standard',
      chargeCategoryCode: chargeCategory.reference,
      billableDays: 365,
      volume: 11,
      section126Factor: 1,
      section127Agreement: true,
      section130Agreement: 'false',
      aggregateFactor: 1,
      adjustmentFactor: 1,
      winterOnly: false,
      supportedSource: false,
      supportedSourceName: null,
      waterCompanyCharge: false
    })

    billLicence.transactions = [transaction]
    bill.billLicences.push(billLicence)
  }

  billRun.bills = [bill]

  return billRun
}

async function _standardBillingData(seedData) {
  const annualBillRun = await _annual(seedData, 'annual')
  const supplementaryBillRun = await _supplementary(seedData, 'supplementary')

  return { annualBillRun, supplementaryBillRun }
}

async function _supplementary(seedData, batchType) {
  const { billingAccount, chargeCategory, licenceBoth, region, scheme, toFinancialYearEnding } = seedData

  const billRun = await BillRunHelper.add({
    batchType,
    regionId: region.id,
    scheme,
    status: 'sent',
    toFinancialYearEnding
  })

  const bill = await BillHelper.add({
    accountNumber: billingAccount.accountNumber,
    billingAccountId: billingAccount.id,
    billRunId: billRun.id
  })

  const billLicence = await BillLicenceHelper.add({
    billId: bill.id,
    licenceId: licenceBoth.id,
    licenceRef: licenceBoth.licenceRef
  })

  let description = 'Water abstraction charge: Agriculture spray irrigation at East Rudham'

  if (batchType === 'two_part_supplementary') {
    description = 'Two-part tariff basic water abstraction charge: Agriculture spray irrigation at East Rudham'
  }

  const creditTransaction = await TransactionHelper.add({
    billLicenceId: billLicence.id,
    credit: true,
    description,
    startDate: new Date(`${toFinancialYearEnding - 1}-04-01`),
    endDate: new Date(`${toFinancialYearEnding}-03-31`),
    chargeType: 'standard',
    chargeCategoryCode: chargeCategory.reference,
    billableDays: 365,
    volume: 11,
    section126Factor: 1,
    section127Agreement: true,
    section130Agreement: 'false',
    aggregateFactor: 1,
    adjustmentFactor: 1,
    winterOnly: false,
    supportedSource: false,
    supportedSourceName: null,
    waterCompanyCharge: false
  })

  if (batchType === 'two_part_supplementary') {
    description = 'Two-part tariff second part water abstraction charge: Agriculture spray irrigation at East Rudham'
  }

  const debitTransaction = await TransactionHelper.add({
    billLicenceId: billLicence.id,
    credit: false,
    description,
    startDate: new Date(`${toFinancialYearEnding - 1}-04-01`),
    endDate: new Date(`${toFinancialYearEnding}-03-31`),
    chargeType: 'standard',
    chargeCategoryCode: chargeCategory.reference,
    // NOTE: If supplementary we want the billable days to differ from the annual transaction to represent a real reason
    // for generating a supplementary bill. Else we want the volume to be different to represent 2PT supplementary.
    billableDays: batchType === 'supplementary' ? 200 : 365,
    volume: batchType === 'supplementary' ? 11 : 5,
    section126Factor: 1,
    section127Agreement: true,
    section130Agreement: 'false',
    aggregateFactor: 1,
    adjustmentFactor: 1,
    winterOnly: false,
    supportedSource: false,
    supportedSourceName: null,
    waterCompanyCharge: false
  })

  billLicence.transactions = [creditTransaction, debitTransaction]
  bill.billLicences = [billLicence]
  billRun.bills = [bill]

  return billRun
}

async function _twoPartTariffBillingData(seedData) {
  const annualBillRun = await _annual(seedData, 'two_part_tariff')
  const supplementaryBillRun = await _supplementary(seedData, 'two_part_supplementary')

  return { annualBillRun, supplementaryBillRun }
}

module.exports = {
  seed,
  zap
}
