'use strict'

// Test framework dependencies
const { describe, it, beforeEach } = require('node:test')
const { expect } = require('@hapi/code')

// Thing under test
const GenerateTransactionService = require('../../../../app/services/bill-runs/two-part-tariff/generate-transaction.service.js')

describe('Generate Transaction service', () => {
  const billLicenceId = '5e2afb53-ca92-4515-ad71-36a7cefbcebb'

  let chargePeriod
  let chargeReference
  let newLicence
  let waterUndertaker

  beforeEach(async () => {
    chargeReference = _chargeReference(billLicenceId)

    chargePeriod = {
      startDate: new Date('2022-04-01'),
      endDate: new Date('2022-10-31')
    }
    newLicence = false
    waterUndertaker = false
  })

  describe('when called', () => {
    describe('with a charge reference that has volume to be billed', () => {
      it('returns a two-part tariff transaction ready to be persisted', () => {
        const result = GenerateTransactionService.go(
          billLicenceId,
          chargeReference,
          chargePeriod,
          newLicence,
          waterUndertaker
        )

        expect(result).to.equal(
          {
            billLicenceId,
            authorisedDays: 0,
            billableDays: 0,
            newLicence,
            waterUndertaker,
            chargeReferenceId: '89450220-0f7f-4280-a946-1fdbe9b789c1',
            startDate: chargePeriod.startDate,
            endDate: chargePeriod.endDate,
            source: 'non-tidal',
            season: 'all year',
            loss: 'low',
            credit: false,
            chargeType: 'standard',
            authorisedQuantity: 20,
            billableQuantity: 15,
            status: 'candidate',
            description: 'Water abstraction charge: Lower Queenstown - Pittisham',
            volume: 15,
            section126Factor: 1,
            section127Agreement: false,
            section130Agreement: false,
            secondPartCharge: true,
            scheme: 'sroc',
            aggregateFactor: 0.75,
            adjustmentFactor: 0.6,
            chargeCategoryCode: '4.4.5',
            chargeCategoryDescription:
              'Low loss, non-tidal, restricted water, up to and including 5,000 ML/yr, Tier 1 model',
            supportedSource: false,
            supportedSourceName: null,
            waterCompanyCharge: false,
            winterOnly: false
          },
          {
            // We skip the ID because it is a UUID generated by the service. We skip purposes because it is the result of
            // calling `toJSON()` on the charge references child ChargeElementModel instances. Including it would just be
            // us testing Objection
            skip: ['id', 'purposes']
          }
        )
      })

      describe('and the charge reference has a two-part tariff agreement (section 127)', () => {
        beforeEach(() => {
          chargeReference.adjustments.s127 = true
        })

        it('returns the two-part tariff prefixed description', () => {
          const result = GenerateTransactionService.go(
            billLicenceId,
            chargeReference,
            chargePeriod,
            newLicence,
            waterUndertaker
          )

          expect(result.description).to.equal(
            'Two-part tariff second part water abstraction charge: Lower Queenstown - Pittisham'
          )
        })
      })
    })

    describe('with a charge reference that has no volume to be billed', () => {
      beforeEach(() => {
        chargeReference.chargeElements[0].reviewChargeElements[0].amendedAllocated = 0
        chargeReference.chargeElements[1].reviewChargeElements[0].amendedAllocated = 0
      })

      it('returns null', () => {
        const result = GenerateTransactionService.go(
          billLicenceId,
          chargeReference,
          chargePeriod,
          newLicence,
          waterUndertaker
        )

        expect(result).to.be.null()
      })
    })
  })
})

function _chargeReference() {
  // NOTE: We are faking an Objection model which comes with a toJSON() method that gets called as part
  // of processing the billing account.
  const toJSON = () => {
    return '{}'
  }

  return {
    id: '89450220-0f7f-4280-a946-1fdbe9b789c1',
    additionalCharges: { isSupplyPublicWater: false },
    adjustments: {
      s126: null,
      s127: false,
      s130: false,
      charge: null,
      winter: false,
      aggregate: '0.562114443'
    },
    chargeCategory: {
      id: 'b270718a-12c0-4fca-884b-3f8612dbe2f5',
      reference: '4.4.5',
      shortDescription: 'Low loss, non-tidal, restricted water, up to and including 5,000 ML/yr, Tier 1 model'
    },
    chargeElements: [
      {
        id: 'e6b98712-227a-40c2-b93a-c05e9047be8c',
        abstractionPeriodStartDay: 1,
        abstractionPeriodStartMonth: 4,
        abstractionPeriodEndDay: 31,
        abstractionPeriodEndMonth: 3,
        reviewChargeElements: [{ id: '1d9050b2-09c8-4570-8173-7f55921437cc', amendedAllocated: 5 }],
        toJSON
      },
      {
        id: '9e6f3f64-78d5-441b-80fc-e01711b2f766',
        abstractionPeriodStartDay: 1,
        abstractionPeriodStartMonth: 4,
        abstractionPeriodEndDay: 31,
        abstractionPeriodEndMonth: 3,
        reviewChargeElements: [{ id: '17f0c41e-e894-41d2-8a68-69dd2b39e9f9', amendedAllocated: 10 }],
        toJSON
      }
    ],
    description: 'Lower Queenstown - Pittisham',
    loss: 'low',
    reviewChargeReferences: [
      {
        id: '3dd04348-2c06-4559-9343-dd7dd76276ef',
        amendedAggregate: 0.75,
        amendedAuthorisedVolume: 20,
        amendedChargeAdjustment: 0.6
      }
    ],
    source: 'non-tidal',
    volume: 20
  }
}
